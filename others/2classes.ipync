# Load libraries
import pandas
import csv
from numpy import vectorize
from pandas import DataFrame
from pandas.io.parsers import TextFileReader
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
import numpy as np
from sklearn.neighbors.kde import KernelDensity
import random
from sklearn.svm import SVC
from sklearn.preprocessing import normalize
from scipy.sparse import dia_matrix
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.neighbors import LocalOutlierFactor
import numpy as np
import pandas as pd


#read labeld data for user i
testUser=5


#read labeld data
dataset = pandas.read_csv("D:/challenge/partial_labels.csv")
#for all
x,segments=dataset.axes
array=dataset.values

z=np.reshape(array[testUser,1:],-1)
z=z.astype('int')
Y_train=z[0:50]
Y_test=z

masquerder=[]
#read instructions
fileName =array[testUser,0]
instructions=pandas.read_fwf("D:/challenge/"+fileName, header=None)
arr=np.reshape(instructions.values,(150,100))
user_test=np.array(arr[0:,:])
user_train=arr[:50,:]
hack=[]

for i in range(10):
    labeld_data = np.reshape(array[i, 1:], -1)
    labeld_data = labeld_data.astype('int')
    fileName = array[i, 0]
    instructions = pandas.read_fwf("D:/challenge/" + fileName, header=None)
    arr = np.reshape(instructions.values, (150, 100))
    for j in range(150):
        if(labeld_data[j]==1):
            hack.append(arr[j,:])


user_train=np.array(user_train)
hack=np.array(hack)
all=np.concatenate((user_train,hack))

trainCorpus=[]
corpus=[]
test_corpus=[]

for i in range(len(user_test)):
    s=' '.join((user_test[i,:]))
    test_corpus.append(s)


for i in range(len(all)):
    s=' '.join((all[i,:]))
    if(i<50):
      trainCorpus.append(s)
      corpus.append(s)
    else:
      corpus.append(s)





vectorizer=CountVectorizer(ngram_range=(2, 2),min_df=0.5)
vectorizer.fit_transform(trainCorpus)
train_all=vectorizer.transform(corpus)
x_test=vectorizer.transform(test_corpus)

##################################################################
wordsCount={}
uniqe=set()
unique_feature_train=np.zeros(150)
unique_feature_test=np.zeros(150)
for i in range(len(all)):
    for j in range(100):
      if(i<50):
       uniqe.add(all[i][j])
       unique_feature_train[i]=random.randint(0, 10)
      else:
       if (all[i][j] not in uniqe):
        unique_feature_train[i] = random.randint(10, 20)

for i in range(len(user_test)):
    if(i<50):
        unique_feature_test[i]=random.randint(0,10)
    for j in range(100):
     if (user_test[i][j] not in uniqe):
      unique_feature_test[i] = unique_feature_test[i] + 1




##################################################################




train_all=np.array(train_all.toarray())
x_test=np.array(x_test.toarray())
classes=np.concatenate((np.zeros(50),np.ones(100)))

train_all=np.c_[ train_all, unique_feature_train ]
x_test=np.c_[x_test,unique_feature_test]

for i in range(len(train_all)):
    print(train_all[i,:])


clf = SVC(gamma='auto',kernel='linear')
clf.fit(train_all,classes)

predicts=clf.predict(x_test)
#print(predicts)


'''
##########################################
def make_meshgrid(x, y, h=.02):
    x_min, x_max = x.min() - 1, x.max() + 1
    y_min, y_max = y.min() - 1, y.max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    return xx, yy

def plot_contours(ax, clf, xx, yy, **params):
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    out = ax.contourf(xx, yy, Z, **params)
    return out

fig, ax = plt.subplots()
# title for the plots
title = ('Decision surface of linear SVC ')
# Set-up grid for plotting.
X0, X1 = unique_feature_train[:, 0], unique_feature_train[:, 1]
xx, yy = make_meshgrid(X0, X1)

plot_contours(ax, clf, xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=classes, cmap=plt.cm.coolwarm, s=20, edgecolors='k')
ax.set_ylabel('y label here')
ax.set_xlabel('x label here')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend()
plt.show()
'''
##########################################




hackerf=0
userf=0
for i in range(len(predicts)):
 if(predicts[i]==1):
  if(Y_test[i]==1):
   plt.plot(i,Y_test[i], 'go')
  else:
   plt.plot(i, Y_test[i], 'ro')
   hackerf = hackerf + 1
 else:
  if(Y_test[i]==0):
   plt.plot(i,Y_test[i], 'go')
  else:
   plt.plot(i, Y_test[i], 'ro')
   userf=userf+1

print("user-false: "+str(userf)+"  "+"hack-false: " +str(hackerf))
plt.show()
